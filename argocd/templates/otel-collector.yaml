apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: collector
  # You'll usually want to add your resources to the argocd namespace.
  namespace: {{ .Values.app.namespace }}
  # Add this finalizer ONLY if you want these to cascade delete.
  finalizers:
    # The default behaviour is foreground cascading deletion
    - resources-finalizer.argocd.argoproj.io
    # Alternatively, you can use background cascading deletion
    # - resources-finalizer.argocd.argoproj.io/background
  # Add labels to your application object.
  labels:
    name: collector
spec:
  destination:
    namespace: {{ .Values.app.namespace }}
    server: {{ .Values.app.destination.server }}
  # The project the application belongs to.
  project: default
  source:
    repoURL: https://open-telemetry.github.io/opentelemetry-helm-charts
    targetRevision: "0.91.0"
    chart: opentelemetry-collector
    helm:
      valuesObject:
        nameOverride: collector
        ## https://github.com/open-telemetry/opentelemetry-helm-charts/blob/main/charts/opentelemetry-collector/UPGRADING.md#0880-to-0890
        image:
          repository: "otel/opentelemetry-collector-contrib"
        mode: deployment
        config:
          ## https://opentelemetry.io/docs/collector/configuration/#receivers
          receivers:
            otlp:
              protocols:
                grpc:
                http:
                  endpoint: ${env:MY_POD_IP}:3030
          ## https://opentelemetry.io/docs/collector/configuration/#exporters
          exporters:
            debug:
              verbosity: normal # detailed, normal, ...
            loki:
              endpoint: http://loki:3100/loki/api/v1/push
            prometheus:
              endpoint: 0.0.0.0:8889
          ## https://opentelemetry.io/docs/collector/configuration/#service
          service:
            pipelines:
              logs:
                receivers: [otlp]
                processors: [batch]
                exporters: [debug, loki]
              traces:
                receivers: [otlp]
                processors: [batch]
                exporters: [debug]
              metrics:
                receivers: [otlp]
                processors: [batch]
                exporters: [debug, prometheus]
        ports:
          otlp-http:
            enabled: true
            containerPort: 3030
            servicePort: 3030
            hostPort: 3030
            protocol: TCP
          prometheus:
            enabled: true
            containerPort: 8889
            servicePort: 8889
            hostPort: 8889
            protocol: TCP
